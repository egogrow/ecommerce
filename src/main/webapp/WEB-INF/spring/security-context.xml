<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<context:component-scan base-package="com.egogrow.commerce.dao" />
    <!--
	 hasRole('role1'): 권한(role1)을 가지고 있는 경우
	 hasAnyRole('role1', 'role2'): 권한들(role1, role2) 하나라도 가지고 있을 경우 (갯수는 제한없다)
	 pemitAll: 권한 있든 말든 모두 접근 가능하다.
	 denyAll: 권한 있든 말든 모두 접근 불가능하다.
	 isAnonymous(): Anonymous 사용자일 경우 (인증을 하지 않은 사용자)	
	 isRememberMe(): Remember-me 기능으로 로그인한 사용자일 경우
	 isAuthenticated(): Anonymous 사용자가 아닐 경우 (인증을 한 사용자)	
	 isFullyAuthenticated(): Anonymous 사용자가 아니고 Remember-me 기능으로 로그인 하지 않은 사용자 일 경우
    -->	
       
	<http auto-config="true" use-expressions="true">
	    <intercept-url pattern="/member/**" access="hasAnyRole('ROLE_MEMBER','ROLE_ADMIN')"/>
	    <intercept-url pattern="/user/**" access="hasAnyRole('ROLE_USER','ROLE_MEMBER','ROLE_ADMIN')"/>
	    <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
	    <intercept-url pattern="/**" access="permitAll"/>
	    
	    <form-login
	    	username-parameter="loginId"
	    	password-parameter="loginPassword"
	    	login-processing-url="/login"
	    	login-page="/login/login"
	    	default-target-url="/"
	    />
	    
	    <!-- error-page="/login/accessDenied" -->
	    <access-denied-handler
	    	error-page="/login/accessDeniedAlert"
	    />
	    
	    <logout
	    	logout-url="/logout"
	    	invalidate-session="true"
	    	logout-success-url="/"
	    />	    
	</http>
	
    <!--  provider  -->
<!--     
    <authentication-manager>
        <authentication-provider>
            <user-service>
                <user name="user" password="1234" authorities="ROLE_USER" />
                <user name="member" password="1234" authorities="ROLE_MEMBER" />
                <user name="admin" password="1234" authorities="ROLE_ADMIN" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
 -->
 <!--    
	<jdbc-user-service data-source-ref="dataSource" id="userService"
	    users-by-username-query="SELECT USER_ID as loginId, USER_PASSWORD as loginPasswd, USER_ENABLED FROM users WHERE USER_ID=?"
	    authorities-by-username-query="SELECT USER_ID as loginID, USER_AUTHORITY FROM users WHERE USER_ID=?"
	/>
        
	<authentication-manager>
	    <authentication-provider user-service-ref="userService">
	    </authentication-provider>
	</authentication-manager>	
 -->	
	<authentication-manager>
	    <!-- <authentication-provider ref="memberAuthService" /> -->
	    <authentication-provider user-service-ref="memberService" />
	</authentication-manager>
	
	<beans:bean id="memberService" class="com.egogrow.commerce.service.MemberServiceImpl" />
	<!-- <beans:bean id="memberAuthService" class="com.egogrow.commerce.service.MemberAuthServiceImpl" /> -->
    
</beans:beans>